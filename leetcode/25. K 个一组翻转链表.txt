class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        '''if k==1:
            return head
        res=[]
        cur=head
        while cur:
            res.append(cur.val)
            cur=cur.next
        result=[]
        x=len(res)%k
        mid_res=res
        if x!=0:
            mid_res=res[:-x]        
        for j in range(0,len(mid_res),k):
            result+=mid_res[j:j+k][::-1]
        if x!=0:
            result+=res[-x:]
        Node=ListNode(result[0])
        curNode=Node
        for c in result[1:]:
            curNode.next=ListNode(c)
            curNode=curNode.next
        return Node'''
    # 翻转一个子链表，并且返回新的头与尾
    def reverse(self, head: ListNode, tail: ListNode):
        prev = tail.next
        p = head
        while prev != tail:
            nex = p.next
            p.next = prev
            prev = p
            p = nex
        return tail, head

    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        hair = ListNode(0)
        hair.next = head
        pre = hair
        while head:
            tail = pre
            # 查看剩余部分长度是否大于等于 k
            for i in range(k):
                tail = tail.next
                if not tail:
                    return hair.next
            nex = tail.next
            head, tail = self.reverse(head, tail)
            # 把子链表重新接回原链表
            pre.next = head
            tail.next = nex
            pre = tail
            head = tail.next      
        return hair.next