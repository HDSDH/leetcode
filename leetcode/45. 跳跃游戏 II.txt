'''class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums)==1:
            return 0
        begin,res=0,1
        while begin+1+nums[begin]<len(nums):
            new=nums[:nums[begin]+begin+1]
            for j in range(len(new)):
                if new[j]+j+1>=len(nums):
                    return res+1
            new[:begin+1]=[1 for _ in range(begin+1)]
            begin=len(new)-1-new[::-1].index(max(new))
            res+=1
        return res'''

class Solution:
    def jump(self, nums: List[int]) -> int:
        n = len(nums)
        max_distance=0
        next_can_reach=0
        step=0
        for i in range(n - 1):
            if max_distance >= i:  
                max_distance = max(max_distance, i + nums[i])
                if i == next_can_reach:                    
                    next_can_reach = max_distance
                    step += 1
        return step